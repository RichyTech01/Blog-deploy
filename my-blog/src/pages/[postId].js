import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { posts } from "data/posts";
import styles from '@/styles/Home.module.css'
import Header from "components/Header";
import Footer from "components/Footer";
import CommentList from 'components/CommentList'
import Head from "next/head";
// import CommentForm from 'components/CommentForm'

function PostPage() {
  const router = useRouter();
  const { postId } = router.query;
  const [post, setPost] = useState(null);

  // Define a comments array to store the comments for the post
  const [comments, setComments] = useState([]);


  // useEffect hook to fetch post data
  useEffect(() => {
    // Convert the posts array to an object that maps post IDs to posts
    const postsById = {};
    for (const post of posts) {
      postsById[post.id] = post;
    }

    // Fetch the post data
    const postData = postsById[postId];
    if (postData) {
      setPost(postData);
      setComments(postData.comments);
    }
  }, [postId]);

  const handleCommentSubmit = (comment) => {
    // Add the comment to the comments array
    const newComment = {
      id: comments.length + 1,
      postId: post.id,
      text: comment,
      replies: [],
    };
    const newComments = [...comments, newComment];
    setComments(newComments);

    // Update the post data to include the new comment
    const updatedPost = {
      ...post,
      comments: newComments,
    };
    setPost(updatedPost);
  };

  const handleReplySubmit = (reply, parentComment) => {
    // Add the reply to the parent comment's replies array
    const newReply = {
      id: parentComment.replies.length + 1,
      postId: post.id,
      text: reply,
      parentId: parentComment.id,
    };
    const newReplies = [...parentComment.replies, newReply];
    const newComments = comments.map((comment) => {
      if (comment.id === parentComment.id) {
        return {
          ...comment,
          replies: newReplies,
        };
      } else {
        return comment;
      }
    });
    setComments(newComments);

    // Update the post data to include the new reply
    const updatedPost = {
      ...post,
      comments: newComments,
    };
    setPost(updatedPost);
  };

  return (
    // Render the post data

    <div>
       <Head>
             <title>Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet"/>
        </Head>
      <header className={styles.header}>
            <Header/>
            </header>
            <main className={styles.main}>
      {post ? (
        <div className="hover">
          <div className={styles.card}>
            <ul key={post.id} className={styles.grid} >
              <li className="posts">
                <h2 className="posttitle"> {post.title}</h2>
              </li>
              <p>{post.datetime}</p>
              <p>{post.body}</p>
            </ul>
            {/* <CommentForm 
            onSubmit={handleCommentSubmit}
            /> */}

            <CommentList
            onSubmit={handleCommentSubmit}
              comments={comments}
              handleReplySubmit={handleReplySubmit}
            />
          </div>
        </div>
      ) : (
        <p>Loading...</p>
      )}
</main>      
       <footer className={styles.footer}>
             <Footer/>
             </footer>
    </div>
  );
}

export default PostPage;
